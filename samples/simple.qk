/**
 * A simple sample Quack program
 * Testing cyclical class definitions
 */
class Pt(x: Int, y: Int) {
    this.x = x;
    this.y = y;

    def STR() : String {
       return "(" + this.x.STR() + ","
                  + this.y.STR() ;
    }

    def PLUS(other: Pt) : Pt {
       return Pt(this.x + other.x, this.y + other.y);
    }

    def _x() : Int { return this.x; }
    def _y() : Int {  return this.y; }
}
class C3(ll: Pt) extends C2{
  this.ll = ll;

  def M() : CoolString {}
}
class C1(ll: Pt) extends Obj{
  this.ll = ll;
}
class C2(ll: Pt) extends C1{
  this.ll = ll;

  def M() : String {}
}
class CoolString(val: String) extends String{
  this.val = val;
}
class SString() {


  def STR() : CoolString {
     return "(String)" ;
  }
}

a = 30;
//a = CoolInt(4);
a = "aaa";
b = "abc";
//c = a.double();

//c = a + b;
//c.PRINT();

/*
x = 5;
if (x == 5)
{
  x = 10;
}
elif (x < 5)
{
  x = 15;
}
else
{
  x = 20;
}
*/
